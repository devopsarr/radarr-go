/*
Radarr

Radarr API docs

API version: v5.8.3.8933
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radarr

import (
	"encoding/json"
)

// checks if the NamingConfigResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamingConfigResource{}

// NamingConfigResource struct for NamingConfigResource
type NamingConfigResource struct {
	Id *int32 `json:"id,omitempty"`
	RenameMovies *bool `json:"renameMovies,omitempty"`
	ReplaceIllegalCharacters *bool `json:"replaceIllegalCharacters,omitempty"`
	ColonReplacementFormat *ColonReplacementFormat `json:"colonReplacementFormat,omitempty"`
	StandardMovieFormat NullableString `json:"standardMovieFormat,omitempty"`
	MovieFolderFormat NullableString `json:"movieFolderFormat,omitempty"`
}

// NewNamingConfigResource instantiates a new NamingConfigResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamingConfigResource() *NamingConfigResource {
	this := NamingConfigResource{}
	return &this
}

// NewNamingConfigResourceWithDefaults instantiates a new NamingConfigResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamingConfigResourceWithDefaults() *NamingConfigResource {
	this := NamingConfigResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NamingConfigResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamingConfigResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NamingConfigResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NamingConfigResource) SetId(v int32) {
	o.Id = &v
}

// GetRenameMovies returns the RenameMovies field value if set, zero value otherwise.
func (o *NamingConfigResource) GetRenameMovies() bool {
	if o == nil || IsNil(o.RenameMovies) {
		var ret bool
		return ret
	}
	return *o.RenameMovies
}

// GetRenameMoviesOk returns a tuple with the RenameMovies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamingConfigResource) GetRenameMoviesOk() (*bool, bool) {
	if o == nil || IsNil(o.RenameMovies) {
		return nil, false
	}
	return o.RenameMovies, true
}

// HasRenameMovies returns a boolean if a field has been set.
func (o *NamingConfigResource) HasRenameMovies() bool {
	if o != nil && !IsNil(o.RenameMovies) {
		return true
	}

	return false
}

// SetRenameMovies gets a reference to the given bool and assigns it to the RenameMovies field.
func (o *NamingConfigResource) SetRenameMovies(v bool) {
	o.RenameMovies = &v
}

// GetReplaceIllegalCharacters returns the ReplaceIllegalCharacters field value if set, zero value otherwise.
func (o *NamingConfigResource) GetReplaceIllegalCharacters() bool {
	if o == nil || IsNil(o.ReplaceIllegalCharacters) {
		var ret bool
		return ret
	}
	return *o.ReplaceIllegalCharacters
}

// GetReplaceIllegalCharactersOk returns a tuple with the ReplaceIllegalCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamingConfigResource) GetReplaceIllegalCharactersOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceIllegalCharacters) {
		return nil, false
	}
	return o.ReplaceIllegalCharacters, true
}

// HasReplaceIllegalCharacters returns a boolean if a field has been set.
func (o *NamingConfigResource) HasReplaceIllegalCharacters() bool {
	if o != nil && !IsNil(o.ReplaceIllegalCharacters) {
		return true
	}

	return false
}

// SetReplaceIllegalCharacters gets a reference to the given bool and assigns it to the ReplaceIllegalCharacters field.
func (o *NamingConfigResource) SetReplaceIllegalCharacters(v bool) {
	o.ReplaceIllegalCharacters = &v
}

// GetColonReplacementFormat returns the ColonReplacementFormat field value if set, zero value otherwise.
func (o *NamingConfigResource) GetColonReplacementFormat() ColonReplacementFormat {
	if o == nil || IsNil(o.ColonReplacementFormat) {
		var ret ColonReplacementFormat
		return ret
	}
	return *o.ColonReplacementFormat
}

// GetColonReplacementFormatOk returns a tuple with the ColonReplacementFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamingConfigResource) GetColonReplacementFormatOk() (*ColonReplacementFormat, bool) {
	if o == nil || IsNil(o.ColonReplacementFormat) {
		return nil, false
	}
	return o.ColonReplacementFormat, true
}

// HasColonReplacementFormat returns a boolean if a field has been set.
func (o *NamingConfigResource) HasColonReplacementFormat() bool {
	if o != nil && !IsNil(o.ColonReplacementFormat) {
		return true
	}

	return false
}

// SetColonReplacementFormat gets a reference to the given ColonReplacementFormat and assigns it to the ColonReplacementFormat field.
func (o *NamingConfigResource) SetColonReplacementFormat(v ColonReplacementFormat) {
	o.ColonReplacementFormat = &v
}

// GetStandardMovieFormat returns the StandardMovieFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NamingConfigResource) GetStandardMovieFormat() string {
	if o == nil || IsNil(o.StandardMovieFormat.Get()) {
		var ret string
		return ret
	}
	return *o.StandardMovieFormat.Get()
}

// GetStandardMovieFormatOk returns a tuple with the StandardMovieFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NamingConfigResource) GetStandardMovieFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandardMovieFormat.Get(), o.StandardMovieFormat.IsSet()
}

// HasStandardMovieFormat returns a boolean if a field has been set.
func (o *NamingConfigResource) HasStandardMovieFormat() bool {
	if o != nil && o.StandardMovieFormat.IsSet() {
		return true
	}

	return false
}

// SetStandardMovieFormat gets a reference to the given NullableString and assigns it to the StandardMovieFormat field.
func (o *NamingConfigResource) SetStandardMovieFormat(v string) {
	o.StandardMovieFormat.Set(&v)
}
// SetStandardMovieFormatNil sets the value for StandardMovieFormat to be an explicit nil
func (o *NamingConfigResource) SetStandardMovieFormatNil() {
	o.StandardMovieFormat.Set(nil)
}

// UnsetStandardMovieFormat ensures that no value is present for StandardMovieFormat, not even an explicit nil
func (o *NamingConfigResource) UnsetStandardMovieFormat() {
	o.StandardMovieFormat.Unset()
}

// GetMovieFolderFormat returns the MovieFolderFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NamingConfigResource) GetMovieFolderFormat() string {
	if o == nil || IsNil(o.MovieFolderFormat.Get()) {
		var ret string
		return ret
	}
	return *o.MovieFolderFormat.Get()
}

// GetMovieFolderFormatOk returns a tuple with the MovieFolderFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NamingConfigResource) GetMovieFolderFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MovieFolderFormat.Get(), o.MovieFolderFormat.IsSet()
}

// HasMovieFolderFormat returns a boolean if a field has been set.
func (o *NamingConfigResource) HasMovieFolderFormat() bool {
	if o != nil && o.MovieFolderFormat.IsSet() {
		return true
	}

	return false
}

// SetMovieFolderFormat gets a reference to the given NullableString and assigns it to the MovieFolderFormat field.
func (o *NamingConfigResource) SetMovieFolderFormat(v string) {
	o.MovieFolderFormat.Set(&v)
}
// SetMovieFolderFormatNil sets the value for MovieFolderFormat to be an explicit nil
func (o *NamingConfigResource) SetMovieFolderFormatNil() {
	o.MovieFolderFormat.Set(nil)
}

// UnsetMovieFolderFormat ensures that no value is present for MovieFolderFormat, not even an explicit nil
func (o *NamingConfigResource) UnsetMovieFolderFormat() {
	o.MovieFolderFormat.Unset()
}

func (o NamingConfigResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamingConfigResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RenameMovies) {
		toSerialize["renameMovies"] = o.RenameMovies
	}
	if !IsNil(o.ReplaceIllegalCharacters) {
		toSerialize["replaceIllegalCharacters"] = o.ReplaceIllegalCharacters
	}
	if !IsNil(o.ColonReplacementFormat) {
		toSerialize["colonReplacementFormat"] = o.ColonReplacementFormat
	}
	if o.StandardMovieFormat.IsSet() {
		toSerialize["standardMovieFormat"] = o.StandardMovieFormat.Get()
	}
	if o.MovieFolderFormat.IsSet() {
		toSerialize["movieFolderFormat"] = o.MovieFolderFormat.Get()
	}
	return toSerialize, nil
}

type NullableNamingConfigResource struct {
	value *NamingConfigResource
	isSet bool
}

func (v NullableNamingConfigResource) Get() *NamingConfigResource {
	return v.value
}

func (v *NullableNamingConfigResource) Set(val *NamingConfigResource) {
	v.value = val
	v.isSet = true
}

func (v NullableNamingConfigResource) IsSet() bool {
	return v.isSet
}

func (v *NullableNamingConfigResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamingConfigResource(val *NamingConfigResource) *NullableNamingConfigResource {
	return &NullableNamingConfigResource{value: val, isSet: true}
}

func (v NullableNamingConfigResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamingConfigResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



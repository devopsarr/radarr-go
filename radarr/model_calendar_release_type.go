/*
Radarr

Radarr API docs

API version: v5.26.2.10099
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radarr

import (
	"encoding/json"
	"fmt"
)

// CalendarReleaseType the model 'CalendarReleaseType'
type CalendarReleaseType string

// List of CalendarReleaseType
const (
	CALENDARRELEASETYPE_CINEMA_RELEASE CalendarReleaseType = "cinemaRelease"
	CALENDARRELEASETYPE_DIGITAL_RELEASE CalendarReleaseType = "digitalRelease"
	CALENDARRELEASETYPE_PHYSICAL_RELEASE CalendarReleaseType = "physicalRelease"
)

// All allowed values of CalendarReleaseType enum
var AllowedCalendarReleaseTypeEnumValues = []CalendarReleaseType{
	"cinemaRelease",
	"digitalRelease",
	"physicalRelease",
}

func (v *CalendarReleaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalendarReleaseType(value)
	for _, existing := range AllowedCalendarReleaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalendarReleaseType", value)
}

// NewCalendarReleaseTypeFromValue returns a pointer to a valid CalendarReleaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalendarReleaseTypeFromValue(v string) (*CalendarReleaseType, error) {
	ev := CalendarReleaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalendarReleaseType: valid values are %v", v, AllowedCalendarReleaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalendarReleaseType) IsValid() bool {
	for _, existing := range AllowedCalendarReleaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CalendarReleaseType value
func (v CalendarReleaseType) Ptr() *CalendarReleaseType {
	return &v
}

type NullableCalendarReleaseType struct {
	value *CalendarReleaseType
	isSet bool
}

func (v NullableCalendarReleaseType) Get() *CalendarReleaseType {
	return v.value
}

func (v *NullableCalendarReleaseType) Set(val *CalendarReleaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarReleaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarReleaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarReleaseType(val *CalendarReleaseType) *NullableCalendarReleaseType {
	return &NullableCalendarReleaseType{value: val, isSet: true}
}

func (v NullableCalendarReleaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarReleaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

